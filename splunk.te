policy_module(splunk, 2.0.1)

gen_require(`
    attribute systemprocess;
    attribute file_type;
    attribute port_type;
    attribute node_type;
    attribute filesystem_type;
    attribute device_node;
    attribute domain;
    class process { signull };
')

########################################
#
# Declarations
#

type splunk_t;
type splunk_exec_t;
init_daemon_domain(splunk_t, splunk_exec_t)
files_type(splunk_t)

#permissive splunk_t;

type splunk_initrc_exec_t;
init_script_file(splunk_initrc_exec_t)

type splunk_tmp_t;
files_tmp_file(splunk_tmp_t)

type splunk_rw_t;
files_type(splunk_rw_t)

########################################
#
# splunk type policy
#

## process

allow splunk_t self:process { fork signal_perms setrlimit execmem };
allow splunk_t self:fifo_file manage_fifo_file_perms;
allow splunk_t self:unix_stream_socket { create_stream_socket_perms sendto recvfrom };
allow splunk_t self:unix_dgram_socket { connected_stream_socket_perms sendto recvfrom };
allow splunk_t self:dir { write remove_name add_name };
allow splunk_t self:file { execute unlink create execute_no_trans };
allow splunk_t splunk_rw_t:fifo_file manage_fifo_file_perms;
allow splunk_t self:capability { sys_resource dac_override sys_ptrace kill };

ifdef(`distro_rhel7',`

	gen_require(`
		class capability2 block_suspend;
	')

	allow splunk_t self:capability2 block_suspend;
')

manage_dirs_pattern(splunk_t, splunk_tmp_t, splunk_tmp_t)
manage_files_pattern(splunk_t, splunk_tmp_t, splunk_tmp_t)
manage_lnk_files_pattern(splunk_t, splunk_tmp_t, splunk_tmp_t)
files_tmp_filetrans(splunk_t, splunk_tmp_t, { dir file lnk_file })

manage_files_pattern(splunk_t, splunk_rw_t, splunk_rw_t)
manage_dirs_pattern(splunk_t, splunk_rw_t, splunk_rw_t)
manage_lnk_files_pattern(splunk_t, splunk_rw_t, splunk_rw_t)

ifndef(`distro_rhel7,distro_rhel8'`
	consoletype_exec(splunk_t)
')

corecmd_exec_bin(splunk_t)
corecmd_exec_shell(splunk_t)

## network

sysnet_dns_name_resolve(splunk_t)
mta_send_mail(splunk_t)
corenet_all_recvfrom_unlabeled(splunk_t)

allow splunk_t self:tcp_socket create_stream_socket_perms;
corenet_tcp_sendrecv_generic_if(splunk_t)
corenet_tcp_sendrecv_generic_node(splunk_t)
corenet_tcp_sendrecv_all_ports(splunk_t)
corenet_tcp_bind_generic_node(splunk_t)
corenet_tcp_bind_all_ports(splunk_t)
corenet_tcp_connect_all_ports(splunk_t)

allow splunk_t self:udp_socket { create_socket_perms listen };
corenet_udp_sendrecv_generic_if(splunk_t)
corenet_udp_sendrecv_generic_node(splunk_t)
corenet_udp_sendrecv_all_ports(splunk_t)
corenet_udp_bind_generic_node(splunk_t)
corenet_udp_bind_all_ports(splunk_t)

## other

domain_read_all_domains_state(splunk_t)
fs_getattr_all_fs(splunk_t)
application_signull(splunk_t)
allow splunk_t systemprocess:process signull;

allow splunk_t file_type : dir_file_class_set getattr;
allow splunk_t domain : dir_file_class_set getattr;
allow splunk_t device_node : dir_file_class_set getattr;
allow splunk_t file_type : file exec_file_perms;
allow splunk_t domain : file exec_file_perms;
allow splunk_t file_type : dir list_dir_perms;
allow splunk_t domain : dir list_dir_perms;

read_lnk_files_pattern(splunk_t, file_type, file_type)

allow splunk_t domain : process { getattr signull };

allow splunk_t port_type : socket_class_set getattr;
allow splunk_t node_type : socket_class_set getattr;

allow splunk_t filesystem_type : dir_file_class_set getattr;

allow splunk_t domain : socket_class_set getattr;

allow splunk_t tmp_t:sock_file { create unlink setattr };

fs_rw_anon_inodefs_files(splunk_t)
init_read_utmp(splunk_t)
kernel_read_network_state(splunk_t)
kernel_read_ring_buffer(splunk_t)
kernel_search_network_sysctl(splunk_t)
kernel_read_all_sysctls(splunk_t)
kernel_getattr_message_if(splunk_t)
kernel_read_software_raid_state(splunk_t)
logging_send_syslog_msg(splunk_t)
selinux_get_enforce_mode(splunk_t)

dev_read_urand(splunk_t)
fs_manage_tmpfs_dirs(splunk_t)
fs_manage_tmpfs_files(splunk_t)
userdom_rw_inherited_user_tmp_files(splunk_t)

########################################
#
# splunk admin role policy
#

# create splunk admin role
role splunkadm_r;

# create splunk admin user environment
userdom_base_user_template(splunkadm)

# allow splunk admin to execute core commands
corecmd_exec_bin(splunkadm_t)

# allow splunk admin to use a shell
corecmd_exec_shell(splunkadm_t)

# allow splunk admin to use sudo
sudo_role_template(splunkadm, splunkadm_r, splunkadm_t)

# allow splunk admin to know their SELinux context
selinux_getattr_fs(splunkadm_t)

# allow splunk admin to administer Splunk
optional_policy(`
        splunk_admin(splunkadm_t, splunkadm_r)
')

# allow other roles to transition to splunk admin role
gen_require(`
        role staff_r;
	role unconfined_r;
')
allow staff_r splunkadm_r;
allow unconfined_r splunkadm_r;

# allow splunk admin to override DAC
allow splunkadm_t self:capability { dac_override dac_read_search };

# allow splunk admin to access proc
kernel_read_system_state(splunkadm_t)
